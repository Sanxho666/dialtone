//
//  DIALTONE
//  UTILITIES: FLEXBOX
//
//  These are the flexbox utility classes for Dialpad's design system Dialtone.
//  For further documentation of these and other classes,
//  visit https://dialpad.design/utilities/flexbox
//
//  TABLE OF CONTENTS
//  • Fixed Width Cells
//  • Utilities
//    - Display
//    - Direction
//    - Wrap
//    - Flow
//    - Justify Content
//    - Align Content
//    - Align Items
//    - Center Items
//    - Align Self
//    - Flex
//    - Flex Shrink
//    - Flex Grow
//    - Order
//
//  ============================================================================
//  $   VARIABLES
//  ----------------------------------------------------------------------------
$grid-columns:      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;

//  ============================================================================
//  $   FLEXBOX UTILITIES
//  ----------------------------------------------------------------------------
@each $breakpoint, $variant in $rwd-variants {
    @include rwd($breakpoint) {
        //  --  FLEXBOX
        //  --------------------------------------------------------------------
        %#{$variant}flex                    { display: flex; }
        %#{$variant}flex-inline             { display: inline-flex; }

        //  --  FIXED CELL WIDTHS
        //  --------------------------------------------------------------------
        @each $col in $grid-columns {
            %#{$variant}flex--cell#{$col} { flex-basis: ($col / length($grid-columns)) * 100%; }
        }

        //  --  FLEX DIRECTION
        //  --------------------------------------------------------------------
        %#{$variant}fd-row                  { flex-direction: row; }
        %#{$variant}fd-row-reverse          { flex-direction: row-reverse; }
        %#{$variant}fd-column               { flex-direction: column; }
        %#{$variant}fd-column-reverse       { flex-direction: column-reverse; }
        %#{$variant}fd-unset                { flex-direction: unset; }

        //  --  FLEX WRAP
        //      This determines if a parent's child items will wrap or not.
        //  --------------------------------------------------------------------
        %#{$variant}fw-wrap                 { flex-wrap: wrap; }
        %#{$variant}fw-wrap-reverse         { flex-wrap: wrap-reverse; }
        %#{$variant}fw-nowrap               { flex-wrap: nowrap; }
        %#{$variant}fw-unset                { flex-wrap: unset; }

        //  --  FLEX FLOW
        //      This is another shorthand property for flex-direction and flex-wrap.
        //      Default value is "row nowrap".
        //  --------------------------------------------------------------------
        %#{$variant}ff-row-wrap             { flex-flow: row wrap; }
        %#{$variant}ff-row-nowrap           { flex-flow: row nowrap; }
        %#{$variant}ff-row-reverse-wrap     { flex-flow: row-reverse wrap; }
        %#{$variant}ff-row-reverse-nowrap   { flex-flow: row-reverse nowrap; }
        %#{$variant}ff-column-wrap          { flex-flow: column wrap; }
        %#{$variant}ff-column-nowrap        { flex-flow: column nowrap; }
        %#{$variant}ff-column-reverse-wrap  { flex-flow: column-reverse wrap; }
        %#{$variant}ff-column-reverse-nowrap{ flex-flow: column-reverse nowrap; }
        %#{$variant}ff-unset                { flex-flow: unset; }

        //  --  JUSTIFY CONTENT
        //      Defines the child alignment along the parent's main axis
        //  --------------------------------------------------------------------
        %#{$variant}jc-center               { justify-content: center; }
        %#{$variant}jc-end                  { justify-content: flex-end; }
        %#{$variant}jc-space-around         { justify-content: space-around; }
        %#{$variant}jc-space-between        { justify-content: space-between; }
        %#{$variant}jc-space-evenly         { justify-content: space-evenly; }
        %#{$variant}jc-start                { justify-content: flex-start; }
        %#{$variant}jc-unset                { justify-content: unset; }

        //  --  ALIGN CONTENT
        //      Aligns the container's lines when there is extra space in the
        //      cross-axis. Note that this only works when a parent container
        //      has more than one line.
        //  --------------------------------------------------------------------
        %#{$variant}ac-center               { align-content: center; }
        %#{$variant}ac-end                  { align-content: flex-end; }
        %#{$variant}ac-space-around         { align-content: space-around; }
        %#{$variant}ac-space-between        { align-content: space-between; }
        %#{$variant}ac-space-evenly         { align-content: space-evenly; }
        %#{$variant}ac-start                { align-content: flex-start; }
        %#{$variant}ac-stretch              { align-content: stretch; }
        %#{$variant}ac-unset                { align-content: unset; }

        //  --  ALIGN ITEMS
        //      Defines the default behavior for how child items align along
        //      the parent's cross axis. Think of it the cross-axis for
        //      justify-content.
        //  --------------------------------------------------------------------
        %#{$variant}ai-center               { align-items: center; }
        %#{$variant}ai-end                  { align-items: flex-end; }
        %#{$variant}ai-baseline             { align-items: baseline; }
        %#{$variant}ai-start                { align-items: flex-start; }
        %#{$variant}ai-stretch              { align-items: stretch; }
        %#{$variant}ai-unset                { align-items: unset; }

        //  --  CENTER ITEMS
        //      A common combination of classes is .jc-center and .ai-center.
        //      Use this class when you want both.
        //  --------------------------------------------------------------------
        %#{$variant}flex__center            { align-items: center; justify-content: center; }

        //  --  ALIGN SELF
        //      Allows child containers to re-align themselves irregardless
        //      of the parent's main axis direction.
        //  --------------------------------------------------------------------
        %#{$variant}as-auto                 { align-self: auto; }
        %#{$variant}as-center               { align-self: center; }
        %#{$variant}as-end                  { align-self: flex-end; }
        %#{$variant}as-baseline             { align-self: baseline; }
        %#{$variant}as-start                { align-self: flex-start; }
        %#{$variant}as-stretch              { align-self: stretch; }
        %#{$variant}as-unset                { align-self: unset; }

        //  --  FLEX
        //      Graduating scale of flex-grow and flex-shrink values
        //  --------------------------------------------------------------------
        %#{$variant}fl0                     { flex: 0 auto; }
        %#{$variant}fl1                     { flex: 1 auto; }
        %#{$variant}fl2                     { flex: 2 auto; }


        //  --  FLEX SHRINK
        //      Specifies the flex-shrink factor, which states how much an item will
        //      shrink relative to other flex items in the container when there isn't
        //      enough space in the row. Default value is 1.
        //  --------------------------------------------------------------------
        %#{$variant}fl-shrink0              { flex-shrink: 0; }
        %#{$variant}fl-shrink1              { flex-shrink: 1; }
        %#{$variant}fl-shrink2              { flex-shrink: 2; }

        //  --  FLEX GROW
        //      Specifies the flex-grow value, which states how much an item will
        //      grow relative to other flex items in the container when there isn't
        //      enough space in the row. Default value is 1.
        //  --------------------------------------------------------------------
        %#{$variant}fl-grow0               { flex-grow: 0; }
        %#{$variant}fl-grow1               { flex-grow: 1; }
        %#{$variant}fl-grow2               { flex-grow: 2; }

        //  --  Ordering
        //      Designate a child container's position.
        //  --------------------------------------------------------------------
        %#{$variant}fo-first               { order: -1; }
        %#{$variant}fo-last                { order: 1; }
    }
}
