//
//  DIALTONE
//  UTILITIES: FLEXBOX
//
//  These are the flexbox utility classes for Dialpad's design system Dialtone.
//  For further documentation of these and other classes,
//  visit https://dialpad.design/utilities/flexbox
//
//  TABLE OF CONTENTS
//  • Fixed Width Cells
//  • Utilities
//    - Display
//    - Direction
//    - Wrap
//    - Flow
//    - Justify Content
//    - Align Content
//    - Align Items
//    - Center Items
//    - Align Self
//    - Flex
//    - Flex Shrink
//    - Flex Grow
//    - Order
//
//  ============================================================================
//  $   FLEXBOX UTILITIES
//  ----------------------------------------------------------------------------
@each $breakpoint, $variant in $rwd-variants {
    //  --  FLEXBOX
    //  --------------------------------------------------------------------
    .#{$variant}flex                    { @extend %#{$variant}flex; }
    .#{$variant}flex-inline             { @extend %#{$variant}flex-inline; }

    //  --  FIXED CELL WIDTHS
    //  --------------------------------------------------------------------
    @each $col in $grid-columns {
        .#{$variant}flex--cell#{$col}   { @extend %#{$variant}flex--cell#{$col}; }
    }

    //  --  FLEX DIRECTION
    //  --------------------------------------------------------------------
    .#{$variant}fd-row                  { @extend %#{$variant}fd-row; }
    .#{$variant}fd-row-reverse          { @extend %#{$variant}fd-row-reverse; }
    .#{$variant}fd-column               { @extend %#{$variant}fd-column; }
    .#{$variant}fd-column-reverse       { @extend %#{$variant}fd-column-reverse; }
    .#{$variant}fd-unset                { @extend %#{$variant}fd-unset; }

    //  --  FLEX WRAP
    //      This determines if a parent's child items will wrap or not.
    //  --------------------------------------------------------------------
    .#{$variant}fw-wrap                 { @extend %#{$variant}fw-wrap; }
    .#{$variant}fw-wrap-reverse         { @extend %#{$variant}fw-wrap-reverse; }
    .#{$variant}fw-nowrap               { @extend %#{$variant}fw-nowrap; }
    .#{$variant}fw-unset                { @extend %#{$variant}fw-unset; }

    //  --  FLEX FLOW
    //      This is another shorthand property for flex-direction and flex-wrap.
    //      Default value is "row nowrap".
    //  --------------------------------------------------------------------
    .#{$variant}ff-row-wrap             { @extend %#{$variant}ff-row-wrap; }
    .#{$variant}ff-row-nowrap           { @extend %#{$variant}ff-row-nowrap; }
    .#{$variant}ff-row-reverse-wrap     { @extend %#{$variant}ff-row-reverse-wrap; }
    .#{$variant}ff-row-reverse-nowrap   { @extend %#{$variant}ff-row-reverse-nowrap; }
    .#{$variant}ff-column-wrap          { @extend %#{$variant}ff-column-wrap; }
    .#{$variant}ff-column-nowrap        { @extend %#{$variant}ff-column-nowrap; }
    .#{$variant}ff-column-reverse-wrap  { @extend %#{$variant}ff-column-reverse-wrap; }
    .#{$variant}ff-column-reverse-nowrap{ @extend %#{$variant}ff-column-reverse-nowrap; }
    .#{$variant}ff-unset                { @extend %#{$variant}ff-unset; }

    //  --  JUSTIFY CONTENT
    //      Defines the child alignment along the parent's main axis
    //  --------------------------------------------------------------------
    .#{$variant}jc-center               { @extend %#{$variant}jc-center; }
    .#{$variant}jc-end                  { @extend %#{$variant}jc-end; }
    .#{$variant}jc-space-around         { @extend %#{$variant}jc-space-around; }
    .#{$variant}jc-space-between        { @extend %#{$variant}jc-space-between; }
    .#{$variant}jc-space-evenly         { @extend %#{$variant}jc-space-evenly; }
    .#{$variant}jc-start                { @extend %#{$variant}jc-start; }
    .#{$variant}jc-unset                { @extend %#{$variant}jc-unset; }

    //  --  ALIGN CONTENT
    //      Aligns the container's lines when there is extra space in the
    //      cross-axis. Note that this only works when a parent container
    //      has more than one line.
    //  --------------------------------------------------------------------
    .#{$variant}ac-center               { @extend %#{$variant}ac-center; }
    .#{$variant}ac-end                  { @extend %#{$variant}ac-end; }
    .#{$variant}ac-space-around         { @extend %#{$variant}ac-space-around; }
    .#{$variant}ac-space-between        { @extend %#{$variant}ac-space-between; }
    .#{$variant}ac-space-evenly         { @extend %#{$variant}ac-space-evenly; }
    .#{$variant}ac-start                { @extend %#{$variant}ac-start; }
    .#{$variant}ac-stretch              { @extend %#{$variant}ac-stretch; }
    .#{$variant}ac-unset                { @extend %#{$variant}ac-unset; }

    //  --  ALIGN ITEMS
    //      Defines the default behavior for how child items align along
    //      the parent's cross axis. Think of it the cross-axis for
    //      justify-content.
    //  --------------------------------------------------------------------
    .#{$variant}ai-center               { @extend %#{$variant}ai-center; }
    .#{$variant}ai-end                  { @extend %#{$variant}ai-end; }
    .#{$variant}ai-baseline             { @extend %#{$variant}ai-baseline; }
    .#{$variant}ai-start                { @extend %#{$variant}ai-start; }
    .#{$variant}ai-stretch              { @extend %#{$variant}ai-stretch; }
    .#{$variant}ai-unset                { @extend %#{$variant}ai-unset; }

    //  --  CENTER ITEMS
    //      A common combination of classes is .jc-center and .ai-center.
    //      Use this class when you want both.
    //  --------------------------------------------------------------------
    .#{$variant}flex__center            { @extend %#{$variant}ai-center; @extend %#{$variant}jc-center; }

    //  --  ALIGN SELF
    //      Allows child containers to re-align themselves irregardless
    //      of the parent's main axis direction.
    //  --------------------------------------------------------------------
    .#{$variant}as-auto                 { @extend %#{$variant}as-auto; }
    .#{$variant}as-center               { @extend %#{$variant}as-center; }
    .#{$variant}as-end                  { @extend %#{$variant}as-end; }
    .#{$variant}as-baseline             { @extend %#{$variant}as-baseline; }
    .#{$variant}as-start                { @extend %#{$variant}as-start; }
    .#{$variant}as-stretch              { @extend %#{$variant}as-stretch; }
    .#{$variant}as-unset                { @extend %#{$variant}as-unset; }

    //  --  FLEX
    //      Graduating scale of flex-grow and flex-shrink values
    //  --------------------------------------------------------------------
    .#{$variant}fl0                     { @extend %#{$variant}fl0; }
    .#{$variant}fl1                     { @extend %#{$variant}fl1; }
    .#{$variant}fl2                     { @extend %#{$variant}fl2; }


    //  --  FLEX SHRINK
    //      Specifies the flex-shrink factor, which states how much an item will
    //      shrink relative to other flex items in the container when there isn't
    //      enough space in the row. Default value is 1.
    //  --------------------------------------------------------------------
    .#{$variant}fl-shrink0              { @extend %#{$variant}fl-shrink0; }
    .#{$variant}fl-shrink1              { @extend %#{$variant}fl-shrink1; }
    .#{$variant}fl-shrink2              { @extend %#{$variant}fl-shrink2; }

    //  --  FLEX GROW
    //      Specifies the flex-grow value, which states how much an item will
    //      grow relative to other flex items in the container when there isn't
    //      enough space in the row. Default value is 1.
    //  --------------------------------------------------------------------
    .#{$variant}fl-grow0               { @extend %#{$variant}fl-grow0; }
    .#{$variant}fl-grow1               { @extend %#{$variant}fl-grow1; }
    .#{$variant}fl-grow2               { @extend %#{$variant}fl-grow2; }

    //  --  Ordering
    //      Designate a child container's position.
    //  --------------------------------------------------------------------
    .#{$variant}fo-first               { @extend %#{$variant}fo-first; }
    .#{$variant}fo-last                { @extend %#{$variant}fo-last; }
}
