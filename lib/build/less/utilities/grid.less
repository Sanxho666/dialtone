//
//  DIALTONE
//  UTILITIES: GRID
//
//  These are the CSS grid utility classes for Dialpad's design system Dialtone.
//  For further documentation of these and other classes,
//  visit https://dialpad.design/utilities/grid
//
//  TABLE OF CONTENTS
//  • Container
//  • Layouts
//  • Areas
//  • Spans
//  • Gutters
//
//  ============================================================================
//  $   GRID CSS VARIABLES
//  ----------------------------------------------------------------------------
:root {
    //  Grid Layout Variables
    --grid-sidebar-col:     minmax(19.2rem, 38.4rem);
    --grid-content-col:     minmax(min-content, 128rem);
    --grid-header-row:      minmax(12.8rem, min-content);
    --grid-content-row:     minmax(51.2rem, max-content);

    //  Grid Columns
    --grid-col:             12;
    --grid-col-width:       minmax(min-content, 25.6rem);
    --grid-auto-col:        1fr;
}

//  ============================================================================
//  $   DISPLAY
//  ----------------------------------------------------------------------------
.d-d-grid   { display: grid !important; }

//  ============================================================================
//  $   GRID LAYOUTS
//  ----------------------------------------------------------------------------
.d-grid-layout--with-columns {
    display: grid;
    grid-template-columns: [full-start] repeat(var(--grid-col), [col-start] var(--grid-col-width) [col-end]) [full-end];
    grid-auto-columns: var(--grid-auto-col);
}

.d-grid-layout--with-sidebar-content {
    display: grid;
    grid-template-areas: "sidebar content";
    grid-template-columns: [sidebar-start] var(--grid-sidebar-col) [sidebar-end content-start] var(--grid-content-col) [content-end];
}

.d-grid-layout--with-header-content {
    display: grid;
    grid-template-areas: "header"
                         "content";
    grid-template-rows: [header-start] var(--grid-header-row) [header-end content-start] var(--grid-content-row) [content-end];
    grid-auto-rows: 1fr;
    grid-auto-columns: minmax(min-content, auto);
}

//  ============================================================================
//  $   GRID GAP
//  ============================================================================
//      Defines the size of grid "gaps" (lines). We generate a gap for
//      each defined spacing unit.
//  ----------------------------------------------------------------------------
.d-grid-gap0          { grid-gap: @spacing0; }
.d-grid-gap1          { grid-gap: @spacing1; }
.d-grid-gap2          { grid-gap: @spacing2; }
.d-grid-gap4          { grid-gap: @spacing4; }
.d-grid-gap6          { grid-gap: @spacing6; }
.d-grid-gap8          { grid-gap: @spacing8; }
.d-grid-gap12         { grid-gap: @spacing12; }
.d-grid-gap16         { grid-gap: @spacing16; }
.d-grid-gap24         { grid-gap: @spacing24; }
.d-grid-gap32         { grid-gap: @spacing32; }
.d-grid-gap48         { grid-gap: @spacing48; }
.d-grid-gap64         { grid-gap: @spacing64; }

.d-grid-row-gap0      { grid-row-gap: @spacing0; }
.d-grid-row-gap1      { grid-row-gap: @spacing1; }
.d-grid-row-gap2      { grid-row-gap: @spacing2; }
.d-grid-row-gap4      { grid-row-gap: @spacing4; }
.d-grid-row-gap6      { grid-row-gap: @spacing6; }
.d-grid-row-gap8      { grid-row-gap: @spacing8; }
.d-grid-row-gap12     { grid-row-gap: @spacing12; }
.d-grid-row-gap16     { grid-row-gap: @spacing16; }
.d-grid-row-gap24     { grid-row-gap: @spacing24; }
.d-grid-row-gap32     { grid-row-gap: @spacing32; }
.d-grid-row-gap48     { grid-row-gap: @spacing48; }
.d-grid-row-gap64     { grid-row-gap: @spacing64; }

.d-grid-column-gap0   { grid-column-gap: @spacing0; }
.d-grid-column-gap1   { grid-column-gap: @spacing1; }
.d-grid-column-gap2   { grid-column-gap: @spacing2; }
.d-grid-column-gap4   { grid-column-gap: @spacing4; }
.d-grid-column-gap6   { grid-column-gap: @spacing6; }
.d-grid-column-gap8   { grid-column-gap: @spacing8; }
.d-grid-column-gap12  { grid-column-gap: @spacing12; }
.d-grid-column-gap16  { grid-column-gap: @spacing16; }
.d-grid-column-gap24  { grid-column-gap: @spacing24; }
.d-grid-column-gap32  { grid-column-gap: @spacing32; }
.d-grid-column-gap48  { grid-column-gap: @spacing48; }
.d-grid-column-gap64  { grid-column-gap: @spacing64; }


//  ============================================================================
//  $   GRID COLUMN SPANS
//  ----------------------------------------------------------------------------
.d-grid-column--span1  { grid-column-start: span var(--gcs-span, 1); }
.d-grid-column--span2  { grid-column-start: span var(--gcs-span, 2); }
.d-grid-column--span3  { grid-column-start: span var(--gcs-span, 3); }
.d-grid-column--span4  { grid-column-start: span var(--gcs-span, 4); }
.d-grid-column--span5  { grid-column-start: span var(--gcs-span, 5); }
.d-grid-column--span6  { grid-column-start: span var(--gcs-span, 6); }
.d-grid-column--span7  { grid-column-start: span var(--gcs-span, 7); }
.d-grid-column--span8  { grid-column-start: span var(--gcs-span, 8); }
.d-grid-column--span9  { grid-column-start: span var(--gcs-span, 9); }
.d-grid-column--span10 { grid-column-start: span var(--gcs-span, 10); }
.d-grid-column--span11 { grid-column-start: span var(--gcs-span, 11); }
.d-grid-column--span12 { grid-column-start: span var(--gcs-span, 12); }
