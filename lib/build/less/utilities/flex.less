//
//  DIALTONE
//  UTILITIES: FLEXBOX
//
//  These are the flexbox utility classes for Dialpad's design system Dialtone.
//  For further documentation of these and other classes,
//  visit https://dialpad.design/utilities/flexbox
//
//  TABLE OF CONTENTS
//  • Fixed Width Cells
//  • Center Center
//  • Flex
//  • Flex Shrink
//  • Flex Grow
//  • Order
//  • Flex Flow
//  • Justify Content
//  • Align Content
//  • Align Items
//  • Align Self
//
//  ============================================================================
//  $   FLEXBOX UTILITIES
//  ============================================================================
//  --  FIXED CELL WIDTHS
//  ----------------------------------------------------------------------------
#build-flex-columns(@num, @count: 1) when (@count =< @num) {
    .d-flex__cell@{count} {
        flex-basis: (@count * 100%) / @num;
    }

    #build-flex-columns(@num, @count + 1);
}
@grid-columns: 12;

.d-flex-columns {
    display: flex;

    #build-flex-columns(@grid-columns);
}


//  --  CENTER ITEMS
//      A common combination of classes is .d-jc-center and .ai-center.
//      Use this class when you want both.
//  ----------------------------------------------------------------------------
.d-flex--center {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

//  --  FLEX
//      Graduating scale of flex-grow and flex-shrink values
//  ----------------------------------------------------------------------------
.d-flex0                                { flex: 0 auto !important; }
.d-flex1                                { flex: 1 auto !important; }
.d-flex2                                { flex: 2 auto !important; }

//  --  FLEX SHRINK
//      Specifies the flex-shrink factor, which states how much an item will
//      shrink relative to other flex items in the container when there isn't
//      enough space in the row. Default value is 1.
//  ----------------------------------------------------------------------------
.d-flex-shrink0                         { flex-shrink: 0; }
.d-flex-shrink1                         { flex-shrink: 1; }
.d-flex-shrink2                         { flex-shrink: 2; }

//  --  FLEX GROW
//      Specifies the flex-grow value, which states how much an item will
//      grow relative to other flex items in the container when there isn't
//      enough space in the row. Default value is 1.
//  ----------------------------------------------------------------------------
.d-flex-grow0                           { flex-grow: 0; }
.d-flex-grow1                           { flex-grow: 1; }
.d-flex-grow2                           { flex-grow: 2; }

//  --  FLEX NONE
//      This is equivalent to flex: 0 0 auto.
//      It sizes the item according to its width/height properties, but makes it
//      fully inflexible.
//  ----------------------------------------------------------------------------
.d-flex-none                      { flex: none; }

//  --  ORDER
//      Designate a child container's position.
//  ----------------------------------------------------------------------------
.d-order--first                         { order: -1; }
.d-order--last                          { order: 1; }

//  --  FLEX FLOW
//      This is another shorthand property for flex-direction and flex-wrap.
//      Default value is "row nowrap".
//  ----------------------------------------------------------------------------
.d-ff-row-wrap              { flex-flow: row wrap !important; }
.d-ff-row-nowrap            { flex-flow: row nowrap !important; }
.d-ff-row-reverse-wrap      { flex-flow: row-reverse wrap !important; }
.d-ff-row-reverse-nowrap    { flex-flow: row-reverse nowrap !important; }
.d-ff-column-wrap           { flex-flow: column wrap !important; }
.d-ff-column-nowrap         { flex-flow: column nowrap !important; }
.d-ff-column-reverse-wrap   { flex-flow: column-reverse wrap !important; }
.d-ff-column-reverse-nowrap { flex-flow: column-reverse nowrap !important; }

//  --  JUSTIFY CONTENT
//      Defines the child alignment along the parent's main axis
//  ----------------------------------------------------------------------------
.d-jc-center            { justify-content: center !important; }
.d-jc-end               { justify-content: flex-end !important; }
.d-jc-space-around      { justify-content: space-around !important; }
.d-jc-space-between     { justify-content: space-between !important; }
.d-jc-space-evenly      { justify-content: space-evenly !important; }
.d-jc-start             { justify-content: flex-start !important; }

//  --  ALIGN CONTENT
//      Aligns the container's lines when there is extra space in the
//      cross-axis. Note that this only works when a parent container
//      has more than one line.
//  ----------------------------------------------------------------------------
.d-ac-center            { align-content: center !important; }
.d-ac-end               { align-content: flex-end !important; }
.d-ac-space-around      { align-content: space-around !important; }
.d-ac-space-between     { align-content: space-between !important; }
.d-ac-space-evenly      { align-content: space-evenly !important; }
.d-ac-start             { align-content: flex-start !important; }
.d-ac-stretch           { align-content: stretch !important; }

//  --  ALIGN ITEMS
//      Defines the default behavior for how child items align along
//      the parent's cross axis. Think of it the cross-axis for
//      justify-content.
//  ----------------------------------------------------------------------------
.d-ai-center            { align-items: center !important; }
.d-ai-end               { align-items: flex-end !important; }
.d-ai-start             { align-items: flex-start !important; }
.d-ai-stretch           { align-items: stretch !important; }
.d-ai-baseline          { align-items: baseline !important; }

//  --  ALIGN SELF
//      Allows child containers to re-align themselves regardless
//      of the parent's main axis direction.
//  ----------------------------------------------------------------------------
.d-as-center            { align-self: center !important; }
.d-as-end               { align-self: flex-end !important; }
.d-as-start             { align-self: flex-start !important; }
.d-as-stretch           { align-self: stretch !important; }
.d-as-auto              { align-self: auto !important; }